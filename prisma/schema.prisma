// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  LK
  PR
}

enum Major {
  TKJ
  RPL
}

enum Religion {
  ISLAM
  CHRISTIAN
  CATHOLIC
  HINDU
  BUDDHIST
  CONFUCIAN
}

enum AcademyStatus {
  ACTIVE
  NONACTIVE
}

enum OrphanStatus {
  NONE
  YATIM
  PIATU
  YATIMPIATU
}

enum ParentStatus {
  ALIVE
  DEAD
}

enum BloodType {
  A
  B
  AB
  O
}

model Student {
  ID           String        @id @default(uuid())
  NISN         String        @unique
  NIK          String        @unique
  fullName     String
  placeOfBirth String
  dateOfBirth  DateTime
  gender       Gender
  address      String
  phone        String
  major        Major
  dateIn       DateTime?     @default(now())
  picture_url  String?
  religion     Religion?
  status       AcademyStatus @default(ACTIVE)
  createdAt    DateTime      @default(now())
  orphanStatus OrphanStatus  @default(NONE)
  child_number Int?
  Brothers     Int?
  from_school  String        @default("")
  citizenship  String?
  blood_type   BloodType?

  // relation 
  father Father? @relation("studentFather")
  mother Mother? @relation("studentMother")
}

model Father {
  ID           String        @id @default(uuid())
  name         String
  job          String?
  phone        String?
  address      String?
  religion     Religion?
  placeOfBirth String
  dateOfBirth  DateTime
  status       ParentStatus?
  education    String
  title        String
  citizenship  String?

  // relation
  student   Student @relation("studentFather", fields: [studentID], references: [ID])
  studentID String  @unique
}

model Mother {
  ID           String        @id @default(uuid())
  name         String
  job          String?
  phone        String?
  address      String?
  religion     Religion?
  placeOfBirth String
  dateOfBirth  DateTime
  status       ParentStatus?
  education    String
  title        String
  citizenship  String?

  // relation
  student   Student @relation("studentMother", fields: [studentID], references: [ID])
  studentID String  @unique
}

model Payments {
  ID            String   @id @default(uuid())
  paymentDate   DateTime @default(now())
  amountPaid    Float
  paymentMethod String
}

// model Parent {
//   ID            String        @id @default(uuid())
//   father_name   String?
//   mother_name   String?
//   father_job    String?
//   mother_job    String?
//   phone         String?
//   address       String?
//   father_status ParentStatus?
//   mother_status ParentStatus?

//   student Student[]
// }

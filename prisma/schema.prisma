// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  LK
  PR
}

enum Major {
  TKJ
  RPL
}

enum Religion {
  ISLAM
  CHRISTIAN
  CATHOLIC
  HINDU
  BUDDHIST
  CONFUCIAN
}

enum AcademyStatus {
  ACTIVE
  NONACTIVE
}

enum OrphanStatus {
  NONE
  YATIM
  PIATU
  YATIMPIATU
}

enum ParentStatus {
  ALIVE
  DEAD
}

enum BloodType {
  A
  B
  AB
  O
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  BANNED
  ACTIVE
}

enum StudentStatus {
  PENDING
  PASSED
  FAILED
}

enum TestType {
  ONLINE
  OFFLINE
}

model User {
  ID           String     @id @default(uuid())
  username     String
  email        String     @unique
  phone        String     @unique
  password     String
  status       UserStatus @default(ACTIVE)
  profile_url  String?
  role         Role       @default(USER)
  refreshToken String?
  Student      Student[]
}

model Student {
  ID            String        @id @default(uuid())
  NISN          String        @unique
  NIK           String        @unique
  fullName      String
  placeOfBirth  String
  dateOfBirth   String
  gender        Gender
  address       String
  phone         String
  major         Major
  dateIn        DateTime?     @default(now())
  picture_url   String?
  religion      Religion?
  AcademyStatus AcademyStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  orphanStatus  OrphanStatus  @default(NONE)
  child_number  Int?
  Brothers      Int?
  TA            String?
  from_school   String        @default("")
  citizenship   String?
  blood_type    BloodType?
  age           Int
  status        StudentStatus @default(PENDING)
  testType      TestType      @default(OFFLINE)

  // relation 
  announcement Announcement?

  studentTests   StudentTest[]
  studentAnswers StudentAnswer[]

  registration RegistrationTransaction[]
  notification Notification[]
  document     Document?                 @relation(fields: [documentID], references: [ID])
  documentID   String?                   @unique
  user         User?                     @relation(fields: [userID], references: [ID])
  userID       String?

  //  relation
  mother   Mother? @relation(fields: [motherID], references: [ID])
  motherID String?

  father   Father? @relation(fields: [fatherID], references: [ID])
  fatherID String?
}

model CategoryTest {
  ID   String @id @default(uuid())
  name String @unique

  // tests  Test[]
  Test Test[]
}

model Test {
  ID         String       @id @default(uuid())
  title      String
  category   CategoryTest @relation(fields: [categoryID], references: [ID])
  categoryID String

  questions    Question[]
  studentTests StudentTest[]
}

model Question {
  ID     String @id @default(uuid())
  text   String
  weight Int    @default(1)
  test   Test   @relation(fields: [testID], references: [ID])
  testID String

  options QuestionOption[]

  correct   QuestionOption? @relation("CorrectOption", fields: [correctID], references: [ID])
  correctID String?         @unique

  studentAnswers StudentAnswer[]
}

model QuestionOption {
  ID            String          @id @default(uuid())
  label         String // A, B, C, D, dst.
  value         String // isi jawaban
  question      Question        @relation(fields: [questionID], references: [ID])
  questionID    String
  correctFor    Question?       @relation("CorrectOption")
  StudentAnswer StudentAnswer[]
}

model StudentTest {
  ID        String  @id @default(uuid())
  student   Student @relation(fields: [studentID], references: [ID])
  studentID String

  test   Test   @relation(fields: [testID], references: [ID])
  testID String

  startedAt  DateTime @default(now())
  finishedAt String?

  score Float?

  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  ID        String  @id @default(uuid())
  student   Student @relation(fields: [studentID], references: [ID])
  studentID String

  question   Question @relation(fields: [questionID], references: [ID])
  questionID String

  selectedOption   QuestionOption @relation(fields: [selectedOptionID], references: [ID])
  selectedOptionID String

  studentTest   StudentTest @relation(fields: [studentTestID], references: [ID])
  studentTestID String

  createdAt DateTime @default(now())
}

model Father {
  ID           String        @id @default(uuid())
  name         String
  job          String?
  phone        String?
  address      String?
  religion     Religion?
  placeOfBirth String
  dateOfBirth  String
  status       ParentStatus?
  education    String?
  title        String?
  citizenship  String?

  // relation

  student Student[]
}

model Mother {
  ID           String        @id @default(uuid())
  name         String
  job          String?
  phone        String?
  address      String?
  religion     Religion?
  placeOfBirth String
  dateOfBirth  String
  status       ParentStatus?
  education    String
  title        String?
  citizenship  String?

  student Student[]
}

enum RegistrationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentStatus {
  SUCCESS
  FAILED
}

model RegistrationTransaction {
  ID               String             @id @default(uuid())
  registrationDate DateTime           @default(now())
  amountPaid       Float
  paymentMethod    String
  status           RegistrationStatus @default(PENDING)
  notes            String?
  reference        String             @unique
  adminFee         Int
  senderName       String
  paymentStatus    PaymentStatus      @default(SUCCESS)
  // relation ke Student
  student          Student            @relation(fields: [studentID], references: [ID])
  studentID        String
}

enum GraduationStatus {
  PASSED
  FAILED
  PENDING
}

model Announcement {
  ID               String           @id @default(uuid())
  title            String
  message          String
  status           GraduationStatus @default(PENDING)
  announcementDate DateTime         @default(now())

  // relasi ke Student
  student   Student @relation(fields: [studentID], references: [ID])
  studentID String  @unique
}

// model Parent {
//   ID            String        @id @default(uuid())
//   father_name   String?
//   mother_name   String?
//   father_job    String?
//   mother_job    String?
//   phone         String?
//   address       String?
//   father_status ParentStatus?
//   mother_status ParentStatus?

//   student Student[]
// }

enum StatusNotification {
  REJECTED
  ACCEPTED
  PENDING
  VERIFIED
  UNVERIFIED
  INFORMATION
}

model Notification {
  ID        String             @id @default(uuid())
  title     String
  content   String
  createdAt DateTime           @default(now())
  is_read   Boolean            @default(false)
  status    StatusNotification

  // relation
  student   Student @relation(fields: [studentID], references: [ID])
  studentID String
}

enum DocStatus {
  PENDING
  APPROVED
  REJECTED
}

model Document {
  ID                 String    @id @default(uuid())
  fatherKTP_url      String?
  motherKTP_url      String?
  familyCard_url     String?
  Akte_url           String?
  Ijazah_url         String?
  studentPicture_url String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  status             DocStatus @default(PENDING)

  // relation 
  student Student?
}

model clientSurvey {
  ID        String   @id @default(uuid())
  name      String?
  Major     Major
  message   String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
